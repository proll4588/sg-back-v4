generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  login            String             @unique(map: "User_pk_2") @db.VarChar(50)
  password         String             @db.VarChar(255)
  roleId           Int
  passbookNumber   Int?               @unique(map: "User_pk")
  TestOneProcesses TestOneProcesses[]
  TestThreeProcess TestThreeProcess[]
  TestTwoProcesses TestTwoProcesses[]
  Role             Role               @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "User_Role_id_fk")
  Student          Student?           @relation(fields: [passbookNumber], references: [passbookNumber], onDelete: NoAction, onUpdate: NoAction, map: "User_Student_passbookNumber_fk")

  @@index([roleId], map: "User_Role_id_fk")
}

model Role {
  id    Int    @id @default(autoincrement())
  title String @unique(map: "Role_pk_2") @db.VarChar(50)
  User  User[]
}

model TestOneAnswer {
  id               Int              @id @default(autoincrement())
  questionId       Int
  answer           Int
  processId        Int
  TestOneProcesses TestOneProcesses @relation(fields: [processId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestOneAnswer_TestOneProcesses_id_fk")
  TestOneQuestions TestOneQuestions @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestOneAnswer_TestOneQuestions_id_fk")

  @@index([questionId], map: "TestOneAnswer_TestOneQuestions_id_fk")
  @@index([processId], map: "TestOneAnswer_TestOneProcesses_id_fk")
}

model TestOneProcesses {
  id            Int             @id @default(autoincrement())
  userId        Int
  startDate     DateTime        @db.DateTime(0)
  endDate       DateTime?       @db.DateTime(0)
  complete      Boolean         @default(false)
  TestOneAnswer TestOneAnswer[]
  User          User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestOneProcesses_User_id_fk")
  TestOneResult TestOneResult[]

  @@index([userId], map: "TestOneProcesses_User_id_fk")
}

model TestOneQuestions {
  id            Int             @id @default(autoincrement())
  text          String          @db.VarChar(255)
  position      Int             @unique(map: "TestOneQuestions_pk_2")
  TestOneAnswer TestOneAnswer[]
}

model TestTwoAnswer {
  id               Int              @id @default(autoincrement())
  questionId       Int
  answer           Boolean
  processId        Int
  TestTwoProcesses TestTwoProcesses @relation(fields: [processId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestTwoAnswer_TestTwoProcesses_id_fk")
  TestTwoQuestions TestTwoQuestions @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestTwoAnswer_TestTwoQuestions_id_fk")

  @@index([processId], map: "TestTwoAnswer_TestTwoProcesses_id_fk")
  @@index([questionId], map: "TestTwoAnswer_TestTwoQuestions_id_fk")
}

model TestTwoProcesses {
  id            Int             @id @default(autoincrement())
  userId        Int
  startDate     DateTime        @db.DateTime(0)
  endDate       DateTime?       @db.DateTime(0)
  complete      Boolean         @default(false)
  TestTwoAnswer TestTwoAnswer[]
  User          User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestTwoProcesses_User_id_fk")
  TestTwoResult TestTwoResult[]

  @@index([userId], map: "TestTwoProcesses_User_id_fk")
}

model TestTwoQuestions {
  id            Int             @id @default(autoincrement())
  text          String          @db.VarChar(1000)
  position      Int             @unique(map: "TestTwoQuestions_pk_2")
  TestTwoAnswer TestTwoAnswer[]
}

model TestOneResult {
  id                Int                 @id @default(autoincrement())
  testOneProcessId  Int
  TestOneProcesses  TestOneProcesses    @relation(fields: [testOneProcessId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestOneResult_TestOneProcesses_id_fk")
  TestOneResultItem TestOneResultItem[]

  @@index([testOneProcessId], map: "TestOneResult_TestOneProcesses_id_fk")
}

model TestOneResultItem {
  id              Int           @id @default(autoincrement())
  testOneResultId Int
  scaleId         Int
  result          Int           @default(0)
  testOneLevelId  Int           @default(1)
  TestOneLevel    TestOneLevel  @relation(fields: [testOneLevelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestOneResultItem_TestOneLevel_id_fk")
  TestOneResult   TestOneResult @relation(fields: [testOneResultId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestOneResultItem_TestOneResult_id_fk")
  TestOneScale    TestOneScale  @relation(fields: [scaleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestOneResultItem_TestOneScale_id_fk")

  @@index([testOneResultId], map: "TestOneResultItem_TestOneResult_id_fk")
  @@index([scaleId], map: "TestOneResultItem_TestOneScale_id_fk")
  @@index([testOneLevelId], map: "TestOneResultItem_TestOneLevel_id_fk")
}

model TestOneScale {
  id                Int                 @id @default(autoincrement())
  title             String              @unique(map: "TestOneScale_pk_2") @db.VarChar(100)
  TestOneResultItem TestOneResultItem[]
}

model TestOneLevel {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(50)
  TestOneResultItem TestOneResultItem[]
}

model Group {
  id      Int       @id @default(autoincrement())
  title   String    @unique(map: "Group_pk_2") @db.VarChar(50)
  Student Student[]
}

model Student {
  passbookNumber Int    @id
  name           String @db.VarChar(100)
  groupId        Int
  Group          Group  @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Student_Group_id_fk")
  User           User?

  @@index([groupId], map: "Student_Group_id_fk")
}

model TestTwoResult {
  id               Int              @id @default(autoincrement())
  kom              Decimal          @db.Decimal(2, 2)
  org              Decimal          @db.Decimal(2, 2)
  komResult        Int
  orgResult        Int
  processId        Int
  TestTwoProcesses TestTwoProcesses @relation(fields: [processId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestTwoResult_TestTwoProcesses_id_fk")

  @@index([processId], map: "TestTwoResult_TestTwoProcesses_id_fk")
}

model TestThreeProcess {
  id              Int               @id @default(autoincrement())
  userId          Int
  date            DateTime          @db.DateTime(0)
  User            User              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestThreeProcess_User_id_fk")
  TestThreeResult TestThreeResult[]

  @@index([userId], map: "TestThreeProcess_User_id_fk")
}

model TestThreeResult {
  id                   Int                  @id @default(autoincrement())
  resultTitleId        Int
  result               Int
  processId            Int
  TestThreeProcess     TestThreeProcess     @relation(fields: [processId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestThreeResult_TestThreeProcess_id_fk")
  TestThreeResultTitle TestThreeResultTitle @relation(fields: [resultTitleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "TestThreeResult_TestThreeResultTitle_id_fk")

  @@index([resultTitleId], map: "TestThreeResult_TestThreeResultTitle_id_fk")
  @@index([processId], map: "TestThreeResult_TestThreeProcess_id_fk")
}

model TestThreeResultTitle {
  id              Int               @id @default(autoincrement())
  title           String            @db.VarChar(255)
  TestThreeResult TestThreeResult[]
}
