type Token {
  token: String!
}

type LoginResponse {
  token: String!
}

type User {
  id: Int!
}

type Query {
  # User #
  getUser: User
  getUsers(roleId: Int): [User]!
  getUsersRoles: [Role]!
  getStudentUsers: [User]!

  getEmployeePositions: [EmployeePosition!]!
  getEmployees: [Employee!]!
  # ==== #

  # Test one #
  getTestOneQuestions: [TestOneQuestions!]!
  getAllTestOneProcess: [TestOneProcess]!
  getTestOneProcessByUserId(userId: Int!): TestOneProcess
  getTestOneResults: [TestOneResult!]!
  # ======== #

  # Test two #
  getAllTestTwoProcess: [TestTwoProcess!]!
  getTestTwoQuestions: [TestTwoQuestions!]!
  getTestTwoProcessByUserId(userId: Int!): TestTwoProcess
  getTestTwoResults: [TestTwoResult!]!
  # ======== #
}

type Mutation {
  # Auth #
  login(login: String!, password: String!): LoginResponse
  # ==== #

  # User #
  deleteUser(userId: Int!): Boolean!
  createUser(login: String!, password: String!, roleId: Int!): User!

  createEmployeePosition(title: String!): EmployeePosition!
  createEmployee(
    login: String!
    password: String!
    positionId: Int!
    name: String!
    email: String!
  ): Employee!
  # ==== #

  # Test one #
  startTestOne(userId: Int!): TestOneProcess
  ansTestOne(processId: Int!, questionId: Int!, ans: Int!): TestOneProcess
  completeTestOne(processId: Int!): TestOneProcess
  # ======== #

  # Test two #
  startTestTwo(userId: Int!): TestTwoProcess
  ansTestTwo(processId: Int!, questionId: Int!, ans: Boolean!): TestTwoProcess
  completeTestTwo(processId: Int!): TestTwoProcess
  # ======== #

  # Test three #
  processPdf(userId: Int!, file: String!): Boolean
  # ========== #
}
